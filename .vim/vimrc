if !1 | finish | endif

"Encoding
set fileencodings=utf-8,sjis
set encoding=utf-8

scriptencoding utf-8

if &compatible
    set nocompatible
endif

"Function
function! s:MakeDir(dir) abort
    if !isdirectory(a:dir)
        call mkdir(a:dir, 'p')
    endif
endfunction

function! s:EditActualFile(filename) abort
    let l:actualFilename = resolve(expand(a:filename))
    execute 'e ' . l:actualFilename
endfunction

function! s:ToggleQuickfix(prefix) abort
    let l:nr = winnr('$')
    execute a:prefix . 'window'
    let l:nr2 = winnr('$')
    if l:nr == l:nr2
        execute a:prefix . 'close'
    endif
endfunction

function! s:QuickfixSettings() abort
    setlocal nowrap
    execute 'resize 6'
endfunction

function! s:GrepSettings() abort
    setlocal wildignore+=*/node_modules/*
    setlocal wildignore+=*/.git/*
endfunction

function! s:WebLangSettings() abort
    setlocal tabstop=2
    setlocal shiftwidth=2
    setlocal iskeyword+=-
endfunction

function! s:TerminalModeSettings() abort
    setlocal winfixheight
    setlocal signcolumn=no
    nnoremap <silent> <buffer> <Leader>w :<C-u>call <SID>TerminalWindowToggle()<CR>
    nnoremap <silent> <buffer> <Leader>q :<C-u>call <SID>TerminalQuit()<CR>
    nnoremap <silent> <buffer> q :<C-u>call <SID>TerminalQuit()<CR>
endfunction

function! s:TerminalOpen(shell_name) abort
    let l:term_list = term_list()
    if !empty(l:term_list)
        let l:active_terminal_winnr = get(map(filter(getwininfo(), 'v:val.terminal == 1'), {_, key -> key.winnr}), 0)
        if l:active_terminal_winnr != 0
            execute l:active_terminal_winnr . 'wincmd w | terminal ++curwin ' . a:shell_name
            return
        endif
    endif
    execute 'botright terminal ' . a:shell_name
endfunction

function! s:TerminalWindowToggle() abort
    let l:term_list = term_list()
    if empty(l:term_list)
        return
    endif
    let l:active_terminal_winid = get(map(filter(getwininfo(), 'v:val.terminal == 1'), {_, key -> key.winid}), 0)
    if l:active_terminal_winid == 0
        execute 'botright sbuffer ' . l:term_list[-1] . '| resize ' . &termwinsize[0]
        setlocal winfixheight
    else
        call win_execute(l:active_terminal_winid,  'q')
    endif
endfunction

function! s:TerminalActiveBufferToggle() abort
    let l:term_list = term_list()
    let l:active_terminal_bufnr = get(map(filter(getwininfo(), 'v:val.terminal == 1'), {_, key -> key.bufnr}), 0)
    if empty(l:term_list) || l:active_terminal_bufnr == 0
        return
    endif
    let l:term_list_active_index = index(l:term_list, l:active_terminal_bufnr)
    let l:active_terminal_winnr = get(map(filter(getwininfo(), 'v:val.terminal == 1'), {_, key -> key.winnr}), 0)
    execute l:active_terminal_winnr . 'wincmd w | buffer ' . l:term_list[l:term_list_active_index - 1]
endfunction

function! s:TerminalQuit() abort
    let l:active_terminal_bufnr = get(map(filter(getwininfo(), 'v:val.terminal == 1'), {_, key -> key.bufnr}), 0)
    call s:TerminalActiveBufferToggle()
    execute 'bdelete! ' . l:active_terminal_bufnr
endfunction

function! SetTerminalMap(shell_name = '') abort
    execute 'nnoremap <silent> <Leader>to :<C-u>call <SID>TerminalOpen("' . a:shell_name . '")<CR>'
    execute 'tnoremap <silent> <C-w>to <C-w>:<C-u>call <SID>TerminalOpen("' . a:shell_name . '")<CR>'
    execute 'tnoremap <silent> <M-t>o <C-w>:<C-u>call <SID>TerminalOpen("' . a:shell_name . '")<CR>'
endfunction

function! s:QuitWindow() abort
    let l:cur_bufnr = bufnr()
    let l:new_bufnr = bufadd('')
    execute 'buffer ' . l:new_bufnr
    try
        execute 'bdelete ' . l:cur_bufnr
    catch
        execute 'buffer ' . l:cur_bufnr . ' | bdelete ' . l:new_bufnr
    endtry
endfunction

"autocmd BufEnter * if (winnr('$') == 1 && (&buftype ==# 'terminal' || &filetype ==# 'qf')) | q! | endif

"Default plugin disable
let g:loaded_zip = 1
let g:loaded_zipPlugin = 1
let g:loaded_tar = 1
let g:loaded_tarPlugin = 1
let g:loaded_gzip = 1
let g:loaded_getscript = 1
let g:loaded_getscriptPlugin = 1
let g:loaded_vimball = 1
let g:loaded_vimballPlugin = 1
let g:loaded_rrhelper = 1
let g:loaded_2html_plugin = 1
let g:skip_loading_mswin = 1
let g:did_install_default_menus = 1
let g:did_install_syntax_menu = 1

let g:vim_indent_cont = 0
let g:mapleader = "\<Space>"

let s:root_markers = [
\       '.vim_local/',
\       '.vscode/',
\       '.git',
\       '.git/',
\       '.svn',
\       '.hg',
\       '.bzr'
\   ]

if has('win32')
    let s:vimfiles_dir = expand('~/vimfiles')
    let s:vimdata_dir = expand('~/vimfiles')
else
    let s:vimfiles_dir = expand('~/.vim')
    let s:vimdata_dir = expand('~/.vim')
endif
let $PATH = s:vimfiles_dir . '\tool;' . $PATH
let s:swap_dir = s:vimfiles_dir . '/swap'
let s:undo_dir = s:vimfiles_dir . '/undo'

call s:MakeDir(s:undo_dir)
call s:MakeDir(s:swap_dir)

"Command
command Cd execute 'lcd %:h'

"Options (:options)
"2 moving around, searching and patterns
set cdhome	
set wrapscan
set incsearch
set ignorecase
set smartcase
"4 displaying text
set scrolloff=5
set breakindent
set showbreak=>\
set display=lastline
set cmdheight=2
set list
set listchars=tab:^-
"5 syntax, highlighting and spelling
set background=dark
set hlsearch
set termguicolors
set cursorline
"6 multiple windows
set laststatus=2
set statusline=%<%f%m%r%h%w%=
set statusline+=\|\ %{&fileencoding},%{&fileformat}\ \|
set statusline+=\ %Y\ \|\ %2l/%L,%-2c\ \|
set hidden
set termwinsize=6x0
"8 terminal
set title
set titlestring=%F
"12 messages and info
set showcmd
set noerrorbells
set visualbell t_vb=
set belloff=all
"13 selecting text
set clipboard+=unnamed
"14 editing text
set undofile
execute 'set undodir=' . s:undo_dir
set backspace=indent,eol,start
set pumheight=5
set showmatch
set matchtime=1
"15 tabs and indenting
set tabstop=4
set shiftwidth=4
set expandtab
set autoindent
set smartindent
"19 reading and writing files
set nobackup
"20 the swap file
execute 'set directory=' . s:swap_dir
set swapfile
"21 command line editing
set wildmode=longest,full
set wildmenu
"27 various
set signcolumn=yes
set viminfo='50,<500,s100,h
execute 'set viminfo+=n' . escape(s:vimfiles_dir, '\') . '/viminfo'

"Mapping
nnoremap <Space> <Nop>
nnoremap <Leader>w :<C-u>write<CR>
nnoremap <Leader>q :<C-u>quit<CR>
nnoremap <Leader>m :<C-u>marks<CR>
nnoremap <Leader>rg :<C-u>registers<CR>
nnoremap <Leader>gs :<C-u>s///g<Left><Left><Left>
nnoremap <Leader>gps :<C-u>%s///g<Left><Left><Left>
nnoremap <Leader>s. :<C-u>source $MYVIMRC<CR>
nnoremap <Leader>d :<C-u>%s/\s\+$//e<CR>
nnoremap <Leader>tj :<C-u>tag<CR>
nnoremap <Leader>tk :<C-u>pop<CR>
nnoremap <Leader>tl :<C-u>tags<CR>
nnoremap <Leader>tm <C-w>T
nnoremap <silent> <Leader><C-l> :<C-u>nohlsearch<CR><C-l>
"http://deris.hatenablog.jp/entry/20130404/1365086716
nnoremap <silent> <Leader>o :<C-u>for i in range(1, v:count1) \| call append(line('.'),   '') \| endfor \| silent! call repeat#set('<Leader>o', v:count1)<CR>
nnoremap <silent> <Leader>O :<C-u>for i in range(1, v:count1) \| call append(line('.')-1, '') \| endfor \| silent! call repeat#set('<Leader>O', v:count1)<CR>
nnoremap <silent> <Leader>. :<C-u>call <SID>EditActualFile($MYVIMRC)<CR>
nnoremap <silent> <Leader>g. :<C-u>call <SID>EditActualFile($MYGVIMRC)<CR>
nnoremap <silent> <Left> <C-w><
nnoremap <silent> <Down> <C-w>-
nnoremap <silent> <Up> <C-w>+
nnoremap <silent> <Right> <C-w>>
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap Y y$
nnoremap <C-]> g<C-]>
nnoremap Q @q
nnoremap [c :<C-u>cprevious<CR>
nnoremap ]c :<C-u>cnext<CR>
nnoremap [l :<C-u>lprevious<CR>
nnoremap ]l :<C-u>lnext<CR>
nnoremap <silent> co :<C-u>call <SID>ToggleQuickfix('c')<CR>
nnoremap <silent> <Leader>co :<C-u>call <SID>ToggleQuickfix('l')<CR>
nnoremap <silent> <Leader>tw :<C-u>call <SID>TerminalWindowToggle()<CR>
nnoremap <silent> <Leader>tt :<C-u>call <SID>TerminalActiveBufferToggle()<CR>
nnoremap <silent> <Leader>tq :<C-u>call <SID>TerminalQuit()<CR>
noremap <Leader>h ^
noremap <Leader>l $
noremap j gj
noremap k gk
noremap gj j
noremap gk k
noremap : ;
noremap ; :
noremap x "_x
noremap X "_X
noremap * *N
inoremap jj <Esc>
inoremap <C-c> <Esc>
inoremap <S-Tab> <C-d>
inoremap <C-@> <C-[>
inoremap <C-U> <C-G>u<C-U>
cnoremap <C-q> <C-f>
cnoremap <C-b> <Left>
cnoremap <C-n> <Down>
cnoremap <C-p> <Up>
cnoremap <C-f> <Right>
cnoremap <C-a> <Home>
cnoremap <C-e> <End>
cnoremap <C-d> <Del>
tnoremap <silent> <C-w>n <C-\><C-n>
tnoremap <silent> <C-w><C-n> <C-\><C-n>
tnoremap <silent> <C-w>; <C-w>:
tnoremap <silent> <C-w>tt <C-w>:<C-u>call <SID>TerminalActiveBufferToggle()<CR>
tnoremap <silent> <C-w>q <C-w>:<C-u>call <SID>TerminalQuit()<CR>
tnoremap <silent> <M-n> <C-\><C-n>
tnoremap <silent> <M-;> <C-w>:
tnoremap <silent> <M-h> <C-w>h
tnoremap <silent> <M-j> <C-w>j
tnoremap <silent> <M-k> <C-w>k
tnoremap <silent> <M-l> <C-w>l
tnoremap <silent> <M-t>t <C-w>:<C-u>call <SID>TerminalActiveBufferToggle()<CR>
tnoremap <silent> <M-q> <C-w>:<C-u>call <SID>TerminalQuit()<CR>

"Autocmd
augroup myAutocmd
    autocmd!
    autocmd ColorScheme * highlight clear Cursorline
    autocmd InsertLeave * set nopaste
    autocmd BufReadPost * if line("'\"") >= 1 && line("'\"") <= line('$') && &ft !~# 'commit' | execute 'normal! g`"' | endif

    autocmd FileType help,vim setlocal keywordprg=:help
    autocmd FileType help,qf nnoremap <silent> <buffer> q :<C-u>q<CR>
    autocmd FileType qf call s:QuickfixSettings()
    autocmd FileType html,pug,javascript,typescript,css,scss,vue call s:WebLangSettings()

    autocmd QuickFixCmdPre *grep* call s:GrepSettings()
    autocmd QuickFixCmdPost *grep* setlocal wildignore&
    autocmd QuickFixCmdPost *grep*,make if len(getqflist()) != 0 | cwindow | endif

    autocmd TerminalWinOpen * call s:TerminalModeSettings()
augroup END

"Finish when using git commit
if $HOME != $USERPROFILE && $GIT_EXEC_PATH != ''
    colorscheme desert
    finish
end

"Plugin
packadd! matchit
"minpack
function! s:PackInit() abort
    packadd minpac

    call minpac#init()
    call minpac#add('k-takata/minpac', {'type': 'opt'})
    call minpac#add('vim-jp/vimdoc-ja')
    "Theme, highlight
    call minpac#add('cocopon/iceberg.vim')
    call minpac#add('itchyny/lightline.vim')
    "Filer
    call minpac#add('mattn/vim-molder')
    call minpac#add('mattn/vim-molder-operations')
    "Fuzzy finder
    call minpac#add('ctrlpvim/ctrlp.vim')
    call minpac#add('mattn/ctrlp-matchfuzzy')
    "Lsp, auto complete, snippet
    call minpac#add('prabirshrestha/vim-lsp')
    call minpac#add('mattn/vim-lsp-settings')
    call minpac#add('prabirshrestha/asyncomplete.vim')
    call minpac#add('prabirshrestha/asyncomplete-lsp.vim')
    call minpac#add('hrsh7th/vim-vsnip')
    call minpac#add('hrsh7th/vim-vsnip-integ')
    "Language
    call minpac#add('mattn/emmet-vim', {'type': 'opt'})
    call minpac#add('alvan/closetag.vim', {'type': 'opt'})
    call minpac#add('digitaltoad/vim-pug', {'type': 'opt'})
    call minpac#add('dNitro/vim-pug-complete', {'type': 'opt'})
    call minpac#add('gko/vim-coloresque', {'type': 'opt'})
    call minpac#add('posva/vim-vue', {'type': 'opt'})
    call minpac#add('previm/previm', {'type': 'opt'})
    "Git
    call minpac#add('tpope/vim-fugitive')
    call minpac#add('airblade/vim-gitgutter')
    "Others
    call minpac#add('tpope/vim-surround')
    call minpac#add('tpope/vim-repeat')
    call minpac#add('jiangmiao/auto-pairs')
    call minpac#add('kana/vim-operator-user')
    call minpac#add('kana/vim-operator-replace')
    call minpac#add('kana/vim-textobj-user')
    call minpac#add('kana/vim-textobj-lastpat')
    call minpac#add('tyru/open-browser.vim')
    call minpac#add('kyoh86/vim-ripgrep', {'frozen': v:true})
    call minpac#add('thinca/vim-qfhl')
    call minpac#add('thinca/vim-quickrun', {'type': 'opt'})
endfunction

function! s:OptPluginHtml() abort
    packadd emmet-vim
    packadd closetag.vim
endfunction

function! OptPluginPug() abort
    packadd vim-pug
    packadd vim-pug-complete
endfunction

function! OptPluginCss() abort
    packadd vim-coloresque
endfunction

function! OptPluginVue() abort
    call s:OptPluginHtml()
    call OptPluginCss()
    packadd vim-vue
endfunction

function! s:OptPluginMarkdown() abort
    packadd previm
endfunction

command! PackUpdate call <SID>PackInit() | call minpac#update()
command! PackClean  call <SID>PackInit() | call minpac#clean()
command! PackStatus packadd minpac | call minpac#status()

augroup optPlugin
    autocmd!
    autocmd FileType html call s:OptPluginHtml()
    autocmd FileType pug call OptPluginPug()
    autocmd FileType css,scss call OptPluginCss()
    autocmd FileType vue call OptPluginVue()
    autocmd FileType markdown call s:OptPluginMarkdown()
    autocmd CmdUndefined QuickRun packadd vim-quickrun
augroup END

"vimdoc-ja
let s:is_helplang_ja = 0

set helplang=en,ja

function! s:HelplangToggle() abort
    if s:is_helplang_ja
        set helplang=en,ja
        let s:is_helplang_ja = 0
        echo 'Help language is English'
    else
        set helplang=ja,en
        let s:is_helplang_ja = 1
        echo 'Help language is Japanese'
    endif
endfunction

nnoremap <silent> <Leader>jh :<C-u>call <SID>HelplangToggle()<CR>

"lightline.vim
let g:ctrlp_status_func = {
\       'main': 'CtrlPStatusFunc1',
\       'prog': 'CtrlPStatusFunc2',
\   }

let g:lightline = {
\      'active': {
\           'left' : [ ['mode', 'paste', 'last_search_count'],
\                      ['fugitive', 'readonly', 'filename'], ['ctrlpmark'] ],
\           'right': [ ['lsp_errors', 'lsp_warnings', 'lineinfo'],
\                      ['filetype'],
\                      ['fileencoding_and_fileformat'] ],
\       },
\       'inactive': {
\           'right': [ ['lineinfo'] ],
\       },
\       'component': {
\           'filename': '%f%{%ModifiedStr()%}',
\           'lineinfo': '%2l/%L,%-2c%<',
\           'filetype': '%{&filetype !=# "" ? &filetype : ""}',
\       },
\       'component_function': {
\           'mode': 'LightlineMode',
\           'last_search_count': 'LastSearchCount',
\           'fugitive': 'LightlineFugitive',
\           'fileencoding_and_fileformat': 'LightlineEncAndFt',
\           'ctrlpmark': 'CtrlPMark',
\       },
\       'component_expand': {
\           'lsp_errors': 'LightlineLSPErrors',
\           'lsp_warnings': 'LightlineLSPWarnings',
\       },
\       'component_type': {
\           'lsp_errors': 'error',
\           'lsp_warnings': 'warning',
\       },
\       'colorscheme': 'iceberg'
\   }

function! ModifiedStr() abort
    if &modified && &filetype !=# 'help' && &buftype !=# 'terminal'
        return ' %m' 
    else
        return ''
    endif
endfunction

function! LightlineMode() abort
    return &filetype ==# 'help' ? 'HELP' :
    \      &filetype ==# 'qf' ? '' :
    \      &filetype ==# 'ctrlp' ? '' :
    \      &filetype ==# 'molder' ? 'MOLDER' :
    \      lightline#mode()
endfunction

function! LastSearchCount() abort
    if !v:hlsearch
        return ''
    endif
    let result = searchcount(#{recompute: v:true})
    if empty(result)
        return ''
    endif
    if result.incomplete ==# 1
        return '[?/??]'
    elseif result.incomplete ==# 2
        if result.total > result.maxcount && result.current > result.maxcount
            return printf('[>%d/>%d]', result.current, result.total)
        elseif result.total > result.maxcount
            return printf('[%d/>%d]', result.current, result.total)
        endif
    endif
    return printf('[%d/%d]', result.current, result.total)
endfunction

function! LightlineFugitive() abort
    if winwidth(0) > 119 && &filetype !~# '\v(help|qf|ctrlp|quickrun)' && &buftype !=# 'terminal'
        if exists('*FugitiveHead')
            let l:branch = FugitiveHead()
            return branch !=# '' ? ' '. l:branch : ''
        endif
    endif
    return ''
endfunction

function! LightlineEncAndFt() abort
    if winwidth(0) > 70 && &buftype !=# 'terminal'
        let l:encoding = &fileencoding !=# '' ? &fileencoding : &encoding
        let l:format = &fileformat
        return l:encoding . ' ' . l:format
    endif
    return ''
endfunction

function! LightlineLSPWarnings() abort
    let l:counts = lsp#get_buffer_diagnostics_counts()
    return l:counts.warning == 0 ? '' : printf('W:%d', l:counts.warning)
endfunction

function! LightlineLSPErrors() abort
    let l:counts = lsp#get_buffer_diagnostics_counts()
    return l:counts.error == 0 ? '' : printf('E:%d', l:counts.error)
endfunction

function! CtrlPMark()
    if &filetype ==# 'ctrlp' && has_key(g:lightline, 'ctrlp_item')
        call lightline#link('cR'[g:lightline.ctrlp_regex])
        return g:lightline.ctrlp_item
    else
        return ''
    endif
endfunction

function! CtrlPStatusFunc1(focus, byfname, regex, prev, item, next, marked)
    let g:lightline.ctrlp_regex = a:regex
    let g:lightline.ctrlp_item = a:item
    return lightline#statusline(0)
endfunction

function! CtrlPStatusFunc2(str)
    return lightline#statusline(0)
endfunction

set noshowmode

augroup lightlineAutocmd
    autocmd!
    autocmd User lsp_diagnostics_updated call lightline#update()
augroup END

"vim-molder
let g:loaded_netrw = 1
let g:loaded_netrwPlugin = 1
let g:loaded_netrwSettings = 1
let g:loaded_netrwFileHandlers = 1
let g:molder_show_hidden = 1

function! s:VimMolderSettings() abort
    nmap <buffer> l <Plug>(molder-open)
    nmap <buffer> h <Plug>(molder-up)
    nmap <buffer> . <Plug>(molder-toggle-hidden)
    nnoremap <buffer> e :<C-u>lcd %<CR>:e<Space>
    nnoremap <buffer> cd :<C-u>lcd %<CR>
endfunction

augroup vimMolderAutocmd
    autocmd!
    autocmd FileType molder call s:VimMolderSettings()
augroup END

"CtrlP
let g:ctrlp_match_window = 'min:8,max:8'
let g:ctrlp_cache_dir = s:vimfiles_dir . '/cache/ctrlp'
let g:ctrlp_root_markers = s:root_markers
let g:ctrlp_custom_ignore = {
\       'dir':  '\v([\/]\.(git|hg|svn)$)|(node_modules|AppData)',
\       'file': '\v\.(exe|so|dll)$',
\   }
let g:ctrlp_match_func = {'match': 'ctrlp_matchfuzzy#matcher'}

"vim-lsp, vim-lsp-settings
let g:lsp_use_lua = has('nvim-0.4.0') || (has('lua') && has('patch-8.2.0775'))
let g:lsp_semantic_enabled = 0
let g:lsp_format_sync_timeout = 1000
let g:lsp_diagnostics_enabled = 1
let g:lsp_diagnostics_float_cursor = 1
let g:lsp_diagnostics_float_delay = 200
let g:lsp_diagnostics_signs_enabled = 1
let g:lsp_diagnostics_signs_priority = 11
let g:lsp_diagnostics_virtual_text_enabled = 0
let g:lsp_settings_enable_suggestions = 0
let g:lsp_settings_root_markers = s:root_markers

function! s:VimlspSettings() abort
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> <Leader>rn <plug>(lsp-rename)
    nmap <buffer> [g <plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <plug>(lsp-next-diagnostic)
    if &filetype != 'vim' | nmap <buffer> K <plug>(lsp-hover) | endif
    inoremap <buffer> <expr> <C-f> lsp#scroll(+4)
    inoremap <buffer> <expr> <C-b> lsp#scroll(-4)
endfunction

augroup vimlspAutocmd
    autocmd!
    autocmd User lsp_buffer_enabled call s:VimlspSettings()
augroup END

"asyncomplete.vim
set shortmess+=c

inoremap <expr> <CR> pumvisible() ? asyncomplete#close_popup() : '<CR>'

"vim-vsnip
imap <expr> <C-j> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-j>'
imap <expr> <C-l> vsnip#available(1) ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'
imap <expr> <Tab> vsnip#jumpable(1) ? '<Plug>(vsnip-jump-next)' : '<Tab>'
imap <expr> <S-Tab> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<S-Tab>'
smap <expr> <C-j> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-j>'
smap <expr> <C-l> vsnip#available(1) ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'
smap <expr> <Tab> vsnip#jumpable(1) ? '<Plug>(vsnip-jump-next)' : '<Tab>'
smap <expr> <S-Tab> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<S-Tab>'

"vim-gitgutter
let g:gitgutter_map_keys = 0

"auto-pairs
nnoremap <Leader>( :<C-u>call AutoPairsToggle()<CR>

"vim-operator-replace
map _ <Plug>(operator-replace)

"vim-textobj-user
"https://github.com/lucapette/vim-textobj-underscore
function! s:SelectCharacter_a(char) abort
    execute 'normal! F' . a:char
    let end_pos = getpos('.')
    execute 'normal! f' . a:char
    let start_pos = getpos('.')
    return ['v', start_pos, end_pos]
endfunction

function! s:SelectCharacter_i(char) abort
    execute 'normal! T' . a:char
    let end_pos = getpos('.')
    execute 'normal! t' . a:char
    let start_pos = getpos('.')
    return ['v', start_pos, end_pos]
endfunction

function! s:SelectUnderscore_a() abort
    return s:SelectCharacter_a('_')
endfunction

function! s:SelectUnderscore_i() abort
    return s:SelectCharacter_i('_')
endfunction

function! s:SelectDash_a() abort
    return s:SelectCharacter_a('-')
endfunction

function! s:SelectDash_i() abort
    return s:SelectCharacter_i('-')
endfunction

function! s:TextobjSettings() abort
    call textobj#user#plugin('underscore', {
    \       '-': {
    \           'sfile': $MYVIMRC,
    \           'select-a-function': 's:SelectUnderscore_a',
    \           'select-a': 'a_',
    \           'select-i-function': 's:SelectUnderscore_i',
    \           'select-i': 'i_'
    \       }
    \   })
    call textobj#user#plugin('dash', {
    \       '-': {
    \           'sfile': $MYVIMRC,
    \           'select-a-function': 's:SelectDash_a',
    \           'select-a': 'a-',
    \           'select-i-function': 's:SelectDash_i',
    \           'select-i': 'i-'
    \       }
    \   })
endfunction

augroup textobjAutocmd
    autocmd!
    autocmd VimEnter * call s:TextobjSettings()
augroup END

"open-browser
let g:openbrowser_no_default_menus = 1

nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)

"vim-ripgrep
let g:ripgrep#root_marks = s:root_markers

command! -nargs=* -complete=file Rg :call ripgrep#search(<q-args>)

"quickrun
let g:quickrun_config = {
\       '_': {
\           'outputter': 'buffer',
\           'outputter/buffer/name': '[Quickrun Output]',
\           'outputter/buffer/split': ':botright 8',
\           'outputter/buffer/running_mark': '[Runninng...]',
\           'runner': 'job',
\       }
\   }

nnoremap <Leader>rq :<C-u>QuickRun<CR>

augroup quickrunAutocmd
    autocmd!
    autocmd BufEnter * if (winnr('$') == 1 && &filetype ==# 'quickrun') | q! | endif
augroup END

"Colorscheme
colorscheme iceberg

let s:vimrc_machine_local_path = s:vimfiles_dir . '/vimrc_local'
if filereadable(s:vimrc_machine_local_path)
    execute 'source ' . s:vimrc_machine_local_path
endif
"Windows vimrc_local
"call SetTerminalMap('powershell or pwsh')
"Linux vimrc_local
"call SetTerminalMap('bash or ...')

let s:vimrc_project_local_path = getcwd() . '/.vim_local/vimrc'
if filereadable(s:vimrc_project_local_path)
    execute 'source ' . s:vimrc_project_local_path
endif

syntax enable
filetype plugin indent on

augroup delayAutocmd
    autocmd!
    autocmd Filetype * set formatoptions-=ro
augroup END
